<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>SUperNodeGame</title>
    <script src="js/phaser.js"></script>
    <script src="js/animation.js"></script>
    <script src="js/monster.js"></script>
    <script src="js/weapon.js"></script>
    <script src="js/figth.js"></script>
    <style type="text/css">
        body {
            margin: 0;
            overflow: hidden;
        }
    </style>
</head>
<body>

<script type="text/javascript">

/*TO DO

Mechanics / gameplay:
Add enemies types mechanics
Add boss mechanics
Add new weapons (Rarity/Range)
Add down mechanics when player is on a transparent plateform

Design/optimization:
Optimize weapon Droping
Optimize damage dealt text style
Optimize Health Bar
Optimize animations
Optimize Code comment
Optimize Gravity
Load stuff only when cameras sees it

Level Design:
Make the make accurate size and add logic level design
->Create an exit to the next level
Add key display (tutorial like)

ToDEBUG
healthBar move too much (updateCam not called enough)
actualyze Item whelding when item Catch

*/

let theGame ;
let curentScore = 0;
let player;
let platforms;
let cursors;
let gameOver = false;

//Group of sprite
let chestGroup = [];
let weaponGroup = [];
let monsterGroup = [];
let healGroup = [];

//Movement of player
let firstJump = false;
let secondJump = false;
let secondJumpTimer;
let accumulatedCursorDown;

//Taille de la map
let curentWidth;
let curentHeight;

window.onload = initiate();

function initiate(){
    curentWidth = 3840;
    curentHeight = 1000;
    let player = null;
    let bombs = null;
    let platforms = null;
    let cursors = null;

    let config = {
        type: Phaser.AUTO,
        width: curentWidth,
        height: curentHeight,
        transparent: true,
        physics: {
            default: 'arcade',
            arcade: {
                gravity: { y: 600 },
                debug: false
            }
        },
        scene: {
            preload: preload,
            create: create,
            update: update
        }
    };
    let game = new Phaser.Game(config);
}
function preload ()
{
    this.load.image('background1_1', './assets/background1_1.png');
    this.load.image('platform', './assets/plateform.png');
    this.load.image('heart', './assets/heart.png');
    this.load.spritesheet('chest', './assets/chest.png', { frameWidth: 256, frameHeight: 256 });
    //spriteSheet of the different whelding of weapons
    this.load.spritesheet('hero_0', './assets/hero_0.png', { frameWidth: 300, frameHeight: 240 });
    this.load.spritesheet('hero_1', './assets/hero_1.png', { frameWidth: 300, frameHeight: 240 });
    this.load.spritesheet('hero_2', './assets/hero_2.png', { frameWidth: 300, frameHeight: 240 });
    this.load.spritesheet('hero_3', './assets/hero_3.png', { frameWidth: 300, frameHeight: 240 });
    //spriteSheet of the weapons
    this.load.spritesheet('w_sword', './assets/weapon_0.png', { frameWidth: 117, frameHeight: 160 });
    this.load.spritesheet('w_hammer', './assets/weapon_2.png', { frameWidth: 90, frameHeight: 120 });
    this.load.spritesheet('w_spear', './assets/weapon_1.png', { frameWidth: 136.5, frameHeight: 169 });
    //spriteSheet of the different monsters
    this.load.spritesheet('monster_2', './assets/monster_2.png', { frameWidth: 128, frameHeight: 192 });
    this.load.spritesheet('monster_3', './assets/monster_3.png', { frameWidth: 310, frameHeight: 310 });
    this.load.spritesheet('monster_4', './assets/monster_4.png', { frameWidth: 128, frameHeight: 192 });
}
function create ()
{
    theGame = this; // Global variable with all game content (may prvoque lags, to clear perhaps)
    this.add.image(curentWidth/4, curentHeight/2, 'background1_1');
    let secondBackground = this.add.image(curentWidth/1.5, curentHeight/2, 'background1_1');
    secondBackground.flipX = true;
    this.cameras.main.setBounds(0, 0, curentWidth*2, curentHeight);
    
    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = this.physics.add.staticGroup();
    //  Here we create the ground.
    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    platforms.create(curentWidth/4, curentHeight-50, 'platform').refreshBody();
    platforms.create(curentWidth/1.5, curentHeight-50, 'platform').refreshBody();

    //Adding keyBoard detection
    if (window.navigator.language != "fr-FR") {
        keyDashLeft = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q); 
    }else keyDashLeft = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
    keyDashRight = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);
    if (window.navigator.language != "fr-FR") {
        keyDrop = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W); 
    }else keyDrop = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Z);
    
    // The player and its settings
    initialisePlayer();

    //Add UI
    graphics = this.add.graphics({ fillStyle: { color: 0x00D000 } });
    healthBar = new Phaser.Geom.Rectangle(this.cameras.main.scrollX + 40, this.cameras.main.scrollY + 70, 300, 75);
    graphics.fillRectShape(healthBar);

    //  Creation of Chest
    createChest(1400, curentHeight - 270);
    createChest(1200, curentHeight - 270);
    createChest(1000, curentHeight - 270);
    createChest(800, curentHeight - 270);
    createChest(600, curentHeight - 270);

    //Creation of monster
    createMonster(1600, curentHeight - 270, 2, 0.9);
    createMonster(1900, curentHeight - 270, 3, 1.05);
    createMonster(2100, curentHeight - 270, 4, 0.7);

    //  Input Events
    cursors = this.input.keyboard.createCursorKeys();

    //Collide effect
    this.physics.add.collider(player, platforms);
    for(let i = 0; chestGroup.length > i; i++){
        this.physics.add.collider(platforms, chestGroup[i]);
    }
    //  Our player animations, turning, walking left and walking right.
    createAnimation(this);
}
function update ()
{
    //if player loses
    if (gameOver)
    {
        player.angle = 90;
        setTimeout(()=>{
            player.visible = false;
        },600);
        this.physics.pause();
        return;
    }
    //Player Movements
    //Reset doublejump on touching the ground
    if(player.body.touching.down && firstJump == true){
        secondJump = false;
        firstJump = false;
        player.leftDash = true;
        player.rightDash = true;
    }
    if (cursors.left.isDown)
    {
        updateCam(this);
        player.setVelocityX(-360);
        player.anims.play('moving' + player.weaponState, true);
        if(player.flipX == false){
            player.flipX = true;
        }
    }
    else if (cursors.right.isDown)
    {
        updateCam(this);
        player.setVelocityX(360);
        player.anims.play('moving ' + player.weaponState, true);
        if(player.flipX == true){
            player.flipX = false;
        }
    }
    else
    {
        player.setVelocityX(0);
        player.anims.play('still' + player.weaponState);
    }
    if(keyDashLeft.isDown && player.leftDash == true){
        let speed = -1400;
        player.leftDash = false;
        player.setVelocityX(speed);
        let dashCooldownLeft = setInterval(()=>{
            updateCam(this);
            speed += 100;
            player.setVelocityX(speed);
            if(speed >= 0){
                setTimeout(()=>{
                    if(player.body.touching.down && secondJump == false){
                        player.leftDash = true
                    }
                }, 900);
                clearInterval(dashCooldownLeft);
            }
        }, 25);
    }else if(keyDashRight.isDown && player.rightDash == true){
        let speed = 1400;
        player.rightDash = false;
        player.setVelocityX(speed);
        let dashCooldownRight = setInterval(()=>{
            updateCam(this);
            speed += -100;
            player.setVelocityX(speed);
            if(speed <= 0){
                setTimeout(()=>{
                    if(player.body.touching.down && secondJump == false){
                        player.rightDash = true
                    }
                }, 900);
                clearInterval(dashCooldownRight);
            }
        }, 25);
    }
    if (cursors.up.isDown && firstJump == false)
    {
        animateHp(player.maxHealth, player.health);
        updateCam(this);
        firstJump = true;
        player.setVelocityY(-400);
        secondJumpTimer = setTimeout(() => {
            secondJump = true;
        }, 200);
    }else if(cursors.up.isDown && firstJump == true){
        if(secondJump == true){
            player.setVelocityY(-450);
            secondJump = false;
        }
    }

    //Player Attack
    if (cursors.space.isDown && player.attackCooldown == true){
        player.anims.play('attack' + player.weaponState);
        player.attackCooldown = false;
        setTimeout(()=>{
            player.attackCooldown = true;
        }, player.attackSpeed)
        for(let i = 0; monsterGroup.length > i; i++){
            playerCoord = player.getBounds();
            monsterCoord = monsterGroup[i].getBounds();
            if(playerCoord.right - 90 + player.range > monsterCoord.left && playerCoord.left + 90 - player.range < monsterCoord.right){
                if(monsterGroup[i].isDead == false){
                    hitMonster(player, monsterGroup[i]);
                }
            }
        }
    }
    //Player Item Pickup
    if(keyDrop.isDown){
        accumulatedCursorDown += 1;
    }else if (keyDrop.isUp){
        accumulatedCursorDown = 0;
    }
    
    //Chest Interaction
    for(let i = 0; chestGroup.length > i; i++){
        if(Phaser.Geom.Intersects.RectangleToRectangle(player.getBounds(), chestGroup[i].getBounds())){
            getChest(player, chestGroup[i]);
        }
    }

    //Weapon Interaction
    if(weaponGroup.length > 0){
        for(let i = 0; weaponGroup.length > i; i++){
            let weapon = weaponGroup[i];
            if(weapon.isEquiped == false){
                if(Phaser.Geom.Intersects.RectangleToRectangle(player.getBounds(), weapon.getBounds())){
                    weapon.anims.play(weapon.name + "_glow");
                    if (accumulatedCursorDown == 10){
                        accumulatedCursorDown = 0;
                        dropWeapon(player, weapon);
                        weapon.visible = false;
                    }
                }else weapon.anims.play(weapon.name + "_basic");
            }
        }
    }
    //healing Interaction
    if(healGroup.length > 0){
        for(let i = 0; healGroup.length > i; i++){
            heal = healGroup[i];
            if(heal.isConsumed == false){
                let playerCoord = player.getBounds();
                let healCoord = heal.getBounds();
                if(playerCoord.right - 90 > healCoord.left && playerCoord.left + 90 < healCoord.right && playerCoord.bottom >= healCoord.top){
                    getHeal(heal, player);
                }
            }
        }
    }
    
    //Monster Interaction
    for(let i = 0; monsterGroup.length > i; i++){
        let monster = monsterGroup[i];
        if(monster.isDead == false){
            let playerCoord = player.getBounds();
            let monsterCoord = monster.getBounds();
            if(playerCoord.right - 90 > monsterCoord.left && playerCoord.left + 90 <monsterCoord.right && playerCoord.bottom >= monsterCoord.top){
                monster.anims.play('attack_m' + monster.imgSuffix);
                lastI = i;
                setTimeout(()=>{
                    if(monsterGroup[lastI].isDead == false){
                        monsterGroup[lastI].anims.play('still_m' + monster.imgSuffix);
                    }
                }, 40, lastI, monsterGroup);
                if(player.invincibleFrame == false){
                    hitPlayer(player, monsterGroup[i]);
                    player.invincibleFrame = true;
                    setTimeout(()=>{
                        player.invincibleFrame = false;
                    }, 700)
                }
            }
            //monster movement
            let isPlayerRight = isPlayerOnRight(player, monster);
            if(player.x + 700 > monster.x || player.x - 700 > monster.x || monster.aggro == true){
                monster.aggro = true;
                if(monster.type == 3 && monster.hasSpecial == true ){
                    if( player.x + 400 > monster.x || player.x - 400 > monster.x){
                        monster.hasSpecial = false;
                        //playAnimCHarge
                        monster.isKnocked = true;
                        monster.body.velocity.x = 0;
                        setTimeout(()=>{
                            if(monster.isDead == false){
                                if(isPlayerRight == true){
                                monster.body.velocity.x = -1200;
                                monster.body.velocity.y = -70;
                                }else{
                                    monster.body.velocity.x =  1200;
                                    monster.body.velocity.y = -70;
                                }
                                setTimeout(()=>{
                                    monster.isKnocked = false;
                                },200);
                                
                            }
                        }, 1100, isPlayerRight);
                        setTimeout(()=>{
                            if(monster.isDead == false){
                                monster.hasSpecial = true;
                            }
                        }, 3000)
                    }
                }else if(monster.type == 4){
                    if(player.x + 800 > monster.x || player.x - 700 < monster.x){
                        monster.body.velocity.x == 0;
                    }else{
                        if(isPlayerRight == true){
                            monster.body.velocity.x = - monster.moveSpeed;
                        }else{
                            monster.body.velocity.x = monster.moveSpeed;
                        }
                    }
                }else{
                    if(monster.isKnocked == false){
                        let randomVelocity = getRandomInt(monster.moveSpeed/5);
                        if(isPlayerRight == true){
                            monster.body.velocity.x = - monster.moveSpeed - randomVelocity;
                        }else{
                            monster.body.velocity.x = monster.moveSpeed + randomVelocity;
                        }
                    }
                }
            }
        }
    }
    //Monster Movement
    
}
function getChest(player, chest){
    if(chest.isOpen == false){
        chest.isOpen = true;
        chest.anims.play("open");
        chosenWeapon = getRandomInt(3);
        createWeapon(chest.getBounds().x, chest.getBounds().y, chosenWeapon)
    }
}
function updateCam(game){
    cameras = game.cameras.main;
    healthBar.setPosition(cameras.scrollX + 40, cameras.scrollY + 70);
    graphics.clear();
    graphics.fillRectShape(healthBar);
    cameras.scrollX = player.x - 700;
}
function isPlayerOnRight(player, monster){
    if(player.x < monster.x){
        return true;
    }else return false;
}

//Function create special sprites
//monster are in monster.js
function createChest(x, y, scale){
    if(!scale){
        scale = 0.4;
    }
    let chest = theGame.physics.add.sprite(x, y, "chest").setScale(scale);
    chest.isOpen = false;
    theGame.physics.add.collider(platforms, chest);
    chestGroup.push(chest);
}
function initialisePlayer(){
    player = theGame.physics.add.sprite(150, 690, 'hero_0');
    player.health = 50;
    player.maxHealth = 50;
    player.depth = 1;
    player.range = 50;
    player.damage = 10;
    player.leftDash = true;
    player.rightDash = true;
    player.attackSpeed = 500;
    player.idWeaponEquiped;
    player.invincibleFrame = false;
    player.attackCooldown = true;
    player.isStun = false;
    player.isKnocked = false;
    player.weaponState = "_0";
    player.knockBack = 30;
    player.setCollideWorldBounds(true);
}
function createHealing(x, y){
    let heal = theGame.physics.add.sprite(x, y, "heart").setScale(0.2);
    heal.isConsumed = false;
    heal.id = healGroup.length;
    theGame.physics.add.collider(platforms, heal);
    healGroup.push(heal);
}
//Basic Function
function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max)) + 1;
}
</script>

</body>
</html>