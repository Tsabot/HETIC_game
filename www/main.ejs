<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>SUperNodeGame</title>
    <script src="js/phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
            overflow: hidden;
        }
    </style>
</head>
<body>

<script type="text/javascript">

/*TO DO
Add item out of chest
Add collect item
Add new spell on UI
Add few spell
Add key display
*/

var theGame ;
var spawnInterval;
var curentScore = 0;
var player;
var platforms;
var cursors;
var score = 0;
var gameOver = false;

//Group of sprite
var chestGroup = [];
var monsterGroup = [];
var healthGroup = [];
var spawning = false;

/*
weapons
new class Weapon{
    name;
    bonusRange;
    damage;
}
spell
new class Spell{
    name;
    damage;
    range;
    duration;
}*/

//Movement of player
var firstJump = false;
var secondJump = false;
var secondJumpTimer;

//Taille de la map
var curentWidth = 3840;
var curentHeight = 1000;

window.onload = initiate();

function initiate(){
    var player = null;
    var bombs = null;
    var platforms = null;
    var cursors = null;

    var config = {
        type: Phaser.AUTO,
        width: curentWidth,
        height: curentHeight,
        transparent: true,
        physics: {
            default: 'arcade',
            arcade: {
                gravity: { y: 400 },
                debug: false
            }
        },
        scene: {
            preload: preload,
            create: create,
            update: update
        }
    };
    var game = new Phaser.Game(config);
    
}

function preload ()
{
    this.load.image('background1_1', './assets/background1_1.png');
    this.load.image('platform', './assets/plateform.png');
    this.load.image('heart', './assets/heart.png');
    this.load.spritesheet('chest', './assets/chest.png', { frameWidth: 256, frameHeight: 256 });
    this.load.spritesheet('hero', './assets/hero.png', { frameWidth: 256, frameHeight: 192 });
    this.load.spritesheet('monster', './assets/monster.png', { frameWidth: 128, frameHeight: 192 });
}

function create ()
{
    theGame = this;
    //  A simple background for our game
    this.add.image(curentWidth/4, curentHeight/2, 'background1_1');
    var secondBackground = this.add.image(curentWidth/1.5, curentHeight/2, 'background1_1');
    secondBackground.flipX = true;
    this.cameras.main.setBounds(0, 0, curentWidth*2, curentHeight);
    textScore = this.add.text(-100, 100, 'Score: ' + curentScore, { color: '#FFFFFF' });
    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = this.physics.add.staticGroup();
    //  Here we create the ground.
    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    platforms.create(curentWidth/4, curentHeight-50, 'platform').refreshBody();
    platforms.create(curentWidth/1.5, curentHeight-50, 'platform').refreshBody();

    // The player and its settings
    player = this.physics.add.sprite(30, 690, 'hero');
    player.health = 3;
    player.invincibleFrame = false;
    player.depth = 1;
    player.attackCooldown = true;
    player.setCollideWorldBounds(true);

    firstHeart = this.physics.add.sprite(30, 900, 'heart').setScale(0.15);
    secondHeart = this.physics.add.sprite(70, 900, 'heart').setScale(0.15);
    thirdHeart = this.physics.add.sprite(100, 900, 'heart').setScale(0.15);
    healthGroup.push(firstHeart, secondHeart, thirdHeart);

    //  Creation of Chest
    chest1 = this.physics.add.sprite(900, curentHeight - 270, 'chest').setScale(0.5);
    chest2 = this.physics.add.sprite(3000, curentHeight - 270, 'chest').setScale(0.5);
    chestGroup.push(chest1, chest2);

    //Creation of monsters
    createMonster(1600, curentHeight - 270, 0.9);

    //  Input Events
    cursors = this.input.keyboard.createCursorKeys();

    //Collide effect
    this.physics.add.collider(player, platforms);

    for(var i = 0; healthGroup.length > i; i++){
        healthGroup[i].body.setAllowGravity(false)
    }
    for(var i = 0; chestGroup.length > i; i++){
        this.physics.add.collider(platforms, chestGroup[i]);
    }
    //  Our player animations, turning, walking left and walking right.
    this.anims.create({
        key: 'left',
        frames: [ { key: 'hero', frame: 3 } ],
        frameRate: 10,
        repeat: -1
    });
    this.anims.create({
        key: 'open',
        frames: [ { key: 'chest', frame: 1 } ],
        frameRate: 10
    });
    this.anims.create({
        key: 'turn',
        frames: [ { key: 'hero', frame: 0 } ],
        frameRate: 20
    });
    this.anims.create({
        key: 'attack',
        frames: this.anims.generateFrameNumbers('hero', { start: 2 }),
        frameRate: 8,
        repeat: -1
    });
    this.anims.create({
        key: 'right',
        frames: [ { key: 'hero', frame: 3 } ]
    });
    updateCam(this);
}

function update ()
{
    if (gameOver)//if player lose
    {
        clearInterval(spawnInterval);
        player.angle = 90;
        setTimeout(()=>{
            player.visible = false;
        },600);
        this.physics.pause();
        return;
    }

    //reset doublejump on touching the ground
    if(player.body.touching.down && firstJump == true){
        secondJump = false;
        firstJump = false;
    }
    //Player mouvement
    if (cursors.left.isDown)
    {
        player.setVelocityX(-360);
        updateCam(this);
        player.anims.play('left', true);
        if(player.flipX == false){
            player.flipX = true;
        }
    }
    else if (cursors.right.isDown)
    {
        updateCam(this);
        player.setVelocityX(360);
        player.anims.play('right', true);
        if(player.flipX == true){
            player.flipX = false;
        }
    }
    else
    {
        player.setVelocityX(0);
        player.anims.play('turn');
    }
    if (cursors.up.isDown && firstJump == false)
    {
        firstJump = true;
        player.setVelocityY(-300);
        secondJumpTimer = setTimeout(() => {
            secondJump = true;
        }, 200);
    }else if(cursors.up.isDown && firstJump == true){
        if(secondJump == true){
            player.setVelocityY(-350);
            secondJump = false;
        }
    }
    if (cursors.space.isDown && player.attackCooldown == true){
        player.anims.play('attack');
        player.attackCooldown = false;
        setTimeout(()=>{
            player.attackCooldown = true;
        }, 800)
        for(var i = 0; monsterGroup.length > i; i++){
            if(Phaser.Geom.Intersects.RectangleToRectangle(player.getBounds(), monsterGroup[i].getBounds())){
                if(monsterGroup[i].isDead == false){
                    hitMonster(player, monsterGroup[i]);
                    curentScore += 1;
                    textScore.setText("Score: " + curentScore);
                }
            }
        }
    }
    
    //Chest Interaction
    for(var i = 0; chestGroup.length > i; i++){
        if(Phaser.Geom.Intersects.RectangleToRectangle(player.getBounds(), chestGroup[i].getBounds())){
            getChest(player, chestGroup[i]);
        }
    }

    //MonsterInteraction
    for(var i = 0; monsterGroup.length > i; i++){
        if(player.getBounds().right - 70 > monsterGroup[i].getBounds().left && player.getBounds().left + 50 < monsterGroup[i].getBounds().right && player.getBounds().bottom >= monsterGroup[i].getBounds().top + 10){
            if(player.invincibleFrame == false && monsterGroup[i].isDead == false){
                hitPlayer(player, monsterGroup[i]);
                player.invincibleFrame = true;
                setTimeout(()=>{
                    player.invincibleFrame = false;
                }, 700)
            }
        }
    }
    //Monster Movement
    if(monsterGroup[0].isDead == false){
        monster1 = monsterGroup[0];
        if(monster1.x < monster1.initialX+300 && monster1.facingRight == true){
            monster1.setVelocityX(160);
        }else if(monster1.x > monster1.initialX - 300){
            if(monster1.facingRight == true){
                monster1.facingRight = false
                monster1.flipX = true;
            }
            monster1.setVelocityX(-160);
        }else{
            monster1.flipX = false;
            monster1.facingRight = true;
        }
    }
    //spawn of monster if first one is defeated
    if(spawning == true){
        for(var i = 0; monsterGroup.length > i; i++){
            if(monsterGroup[i].isDead == false){
                isPlayerOnLeft = localizePlayer(player, monsterGroup[i]);
                if(isPlayerOnLeft == true){
                    monsterGroup[i].setVelocityX(-160);
                }else monsterGroup[i].setVelocityX(160);
            }
        }
    }
}
function hitPlayer(player, monster){
    takeDmg(player);
    player.health += -1;
    if(player.health == 2){
        thirdHeart.destroy();
    }else if(player.health == 1){
        secondHeart.destroy();
    } else firstHeart.destroy();
    if(player.health == 0){
        gameOver = true;
        return;
    }
}
function hitMonster(player, monster){
    monster.destroy();
    monster.isDead = true;
    if(monsterGroup[0].isDead == true && spawning == false){
        spawning = true;
        var spawnInterval = setInterval(()=>{
            createMonster(2200, curentHeight - 370, 0.9)
        }, 600)
    }
}
function getChest(player, chest){
    chest.anims.play("open");
}
function updateCam(game){
    game.cameras.main.scrollX = player.x - 700;
    textScore.x = game.cameras.main.scrollX + 300;
    firstHeart.x = player.x - 80;
    secondHeart.x = player.x;
    thirdHeart.x = player.x + 80;
}
function takeDmg(player){
    var damageInterval = setInterval(() => {
        if(player.visible == true){
            player.visible = false;
        }
        else player.visible = true;
        
    }, 150);
    setTimeout(()=>{
        clearInterval(damageInterval);
        player.visible = true;
    }, 600);
}
function localizePlayer(player, monster){
    if(player.x < monster.x){
        return true;
    }else return false;
}

//Function create special sprites
function createMonster(x, y, scale, facingRight, health, damage){
    let monster = theGame.physics.add.sprite(x, y, "monster").setScale(scale);
    monster.initialX = x;
    if(!facingRight){
        facingRight = true;
    }
    monster.facingRight = facingRight;
    if(!health){
        health = 100;
    }
    monster.health = health;
    if(!damage){
        damage = 1;
    }
    monster.damage = damage;
    monster.isDead = false;
    theGame.physics.add.collider(platforms, monster);
    monsterGroup.push(monster);
}
</script>

</body>
</html>